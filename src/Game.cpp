//
// Created by XOS on 24-11-4.
//
#include "../include/Game.h"

Game::Game()
    : pacman(GameConfig::PACMAN_START_X, GameConfig::PACMAN_START_Y),
      score(0),
      gameOver(false) {

    initializeMap();
    ghosts.push_back(Ghost(GameConfig::GHOST_HOME_X - 2, GameConfig::GHOST_HOME_Y));
    ghosts.push_back(Ghost(GameConfig::GHOST_HOME_X + 2, GameConfig::GHOST_HOME_Y));

    console = std::make_unique<ConsoleBuffer>(GameConfig::MAP_WIDTH,
                                            GameConfig::MAP_HEIGHT + 2);
}

void Game::initializeMap() {
    // 28x31的经典吃豆人地图布局
    map = {
        {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
        {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','#','#','.','.','.','.','.','.','.','.','.','.','.','.'},
        {'#','.','#','#','#','#','.','#','#','#','#','#','.','.','.','.','.','#','#','#','#','#','#','.','#','#','#','.'},
        {'#','o','#','#','#','#','.','#','#','#','#','#','.','#','#','#','#','.','#','#','#','#','#','.','#','#','#','o'},
        {'#','.','#','#','#','#','.','#','#','#','#','#','.','#','#','#','#','.','#','#','#','#','#','.','#','#','#','.'},
        {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'},
        {'#','.','#','#','#','#','.','#','#','.','#','#','#','#','#','#','#','#','#','#','.','#','#','.','#','#','#','.'},
        {'#','.','#','#','#','#','.','#','#','.','#','#','#','#','#','#','#','#','#','#','.','#','#','.','#','#','#','.'},
        {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','#','#','.','.','.','.','.','.','.','.','.','.','.','.'},
        {'#','#','#','#','#','#','.','#','#','#','#','#','.','.','.','.','.','#','#','#','#','#','.','#','#','#','#','#'},
        {'#','#','#','#','#','#','.','#','#','#','#','#','.','#','#','#','#','.','#','#','#','#','.','#','#','#','#','#'},
        {'#','#','#','#','#','#','.','#','#','.','.','.','.','.','.','.','.','.','.','.','#','#','.','#','#','#','#','#'},
        {'#','#','#','#','#','#','.','#','#','.','#','#','#',' ',' ','#','#','#','.','.','.','.','.','#','#','#','#','#'},
        {'#','#','#','#','#','#','.','#','#','.','#',' ',' ',' ',' ',' ',' ','#','.','#','#','.','#','#','#','#','#','#'},
        {' ',' ',' ',' ',' ',' ','.','.','.','.','.','#',' ',' ',' ',' ',' ','#','.','#','#','.','#','#','#','#','#','#'},
        {'#','#','#','#','#','#','.','#','#','.','#',' ',' ',' ',' ',' ',' ','#','.','#','#','.','#','#','#','#','#','#'},
        {'#','#','#','#','#','#','.','#','#','.','#','#','#','#','#','#','#','#','.','#','#','.','#','#','#','#','#','#'},
        {'#','#','#','#','#','#','.','#','#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','#','#','#','#'},
        {'#','#','#','#','#','#','.','#','#','.','#','#','#','#','#','#','#','#','#','#','#','.','#','#','#','#','#','#'},
        {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','#','#','.','.','.','.','.','.','.','.','.','.','.','.'},
        {'#','.','#','#','#','#','.','#','#','#','#','#','.','.','.','.','.','#','#','#','#','#','.','#','#','#','#','.'},
        {'#','.','#','#','#','#','.','#','#','#','#','#','.','#','#','#','#','.','#','#','#','#','.','#','#','#','#','.'},
        {'#','o','.','.','#','#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'},
        {'#','#','#','.','#','#','.','#','#','.','#','#','#','#','#','#','#','#','#','#','.','#','#','.','#','#','#','#'},
        {'#','#','#','.','#','#','.','#','#','.','#','#','#','#','#','#','#','#','#','#','.','#','#','.','#','#','#','#'},
        {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','#','#','.','.','.','.','.','.','.','.','.','.','.','.'},
        {'#','.','#','#','#','#','#','#','#','#','#','#','.','.','.','.','.','#','#','#','#','#','#','#','#','#','#','.'},
        {'#','.','#','#','#','#','#','#','#','#','#','#','.','#','#','#','#','.','#','#','#','#','#','#','#','#','#','.'},
        {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'},
        {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}
    };
}

// void Game::clearScreen() {
//     HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
//     COORD coordScreen = {0, 0};
//     DWORD cCharsWritten;
//     CONSOLE_SCREEN_BUFFER_INFO csbi;
//     DWORD dwConSize;
//
//     GetConsoleScreenBufferInfo(hConsole, &csbi);
//     dwConSize = csbi.dwSize.X * csbi.dwSize.Y;
//     FillConsoleOutputCharacter(hConsole, ' ', dwConSize, coordScreen, &cCharsWritten);
//     GetConsoleScreenBufferInfo(hConsole, &csbi);
//     FillConsoleOutputAttribute(hConsole, csbi.wAttributes, dwConSize, coordScreen, &cCharsWritten);
//     SetConsoleCursorPosition(hConsole, coordScreen);
// }

void Game::run() {
    while (!gameOver) {
        updateGame();
        displayGame();
        Sleep(GameConfig::GAME_SPEED);
    }

    // 游戏结束后显示最终画面
    displayGame();
    Sleep(2000); // 显示游戏结束画面2秒
}

void Game::updateGame() {
    Position oldPos = pacman.getPosition();
    pacman.move(map);
    Position newPos = pacman.getPosition();

    if (map[newPos.y][newPos.x] == GameConfig::DOT) {
        score += 10;
        map[newPos.y][newPos.x] = GameConfig::EMPTY;
    }

    for (auto& ghost : ghosts) {
        ghost.move(map);
        if (ghost.getPosition().x == pacman.getPosition().x &&
            ghost.getPosition().y == pacman.getPosition().y) {
            gameOver = true;
            return;
        }
    }
}

void Game::displayGame() {
    // 清除缓冲区
    console->clear();

    // 创建用于显示的地图副本
    std::vector<std::vector<char>> displayMap = map;

    // 放置吃豆人
    Position pPos = pacman.getPosition();
    displayMap[pPos.y][pPos.x] = pacman.getSymbol();

    // 放置幽灵
    for (const auto& ghost : ghosts) {
        Position gPos = ghost.getPosition();
        displayMap[gPos.y][gPos.x] = ghost.getSymbol();
    }

    // 绘制地图
    console->drawMatrix(displayMap);

    // 绘制分数
    std::string scoreText = "Score: " + std::to_string(score);
    console->drawString(0, GameConfig::MAP_HEIGHT, scoreText);

    // 绘制控制说明
    console->drawString(0, GameConfig::MAP_HEIGHT + 1, "Use WASD keys to move");

    // 如果游戏结束，显示游戏结束消息
    if (gameOver) {
        std::string gameOverText = "GAME OVER!";
        console->drawString((GameConfig::MAP_WIDTH - gameOverText.length()) / 2,
                          GameConfig::MAP_HEIGHT / 2,
                          gameOverText);
    }

    // 交换缓冲区
    console->swap();
}